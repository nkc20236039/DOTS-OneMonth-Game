//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Project/Scripts/InputSystem/PlayerInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputAction"",
    ""maps"": [
        {
            ""name"": ""IngamePlayer"",
            ""id"": ""25295ad2-df28-4c67-9dbc-f4432d3d48b6"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""b2d563d4-d2e3-4596-a9c4-d675b8bfa1c7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Avoid"",
                    ""type"": ""Button"",
                    ""id"": ""f8ee50fe-709e-48ce-9a97-0252df7dd7b7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""4d397035-efe7-4648-b0e3-c476c5183e91"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CrosshairReset"",
                    ""type"": ""Button"",
                    ""id"": ""5c775e4b-23ae-4a6c-bd48-bfc3d53ee9a5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""dfd7b6b7-4476-4b7d-8cf1-74b7234fcc8d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8bf164a9-f151-4fd9-a5a2-d1e6c27d02fb"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6db72ec3-4b70-4335-ae27-a42549e68ec6"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""960c7346-d91e-4491-9042-2f376bddd029"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ebdd7fc1-4f04-46fa-ad67-3d576ebfdaec"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""38daac03-8943-437d-a8c0-4ae8710d3554"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7411b90b-39cd-458b-bc3c-81e5789825d9"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8ed6523e-d629-4286-a138-68ef654cbf26"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c229fcc0-004b-4541-807e-0450887f28a6"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""958e40e1-712f-4d64-912d-ecb6711a29db"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d23c3a4f-531c-49b8-a765-205b9896a797"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Avoid"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""741b87a6-50e6-4b73-948b-db41d7be7dc5"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Avoid"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""33d279b6-931f-451b-81bc-f5ca78018875"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2"",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e8209b2c-6147-4f5c-92a5-53ef94b70618"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2"",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""81088bd8-5858-4039-a09c-9364330f73a3"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CrosshairReset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""73c554bf-a168-40de-90df-f9c7412aa404"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CrosshairReset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // IngamePlayer
        m_IngamePlayer = asset.FindActionMap("IngamePlayer", throwIfNotFound: true);
        m_IngamePlayer_Move = m_IngamePlayer.FindAction("Move", throwIfNotFound: true);
        m_IngamePlayer_Avoid = m_IngamePlayer.FindAction("Avoid", throwIfNotFound: true);
        m_IngamePlayer_Look = m_IngamePlayer.FindAction("Look", throwIfNotFound: true);
        m_IngamePlayer_CrosshairReset = m_IngamePlayer.FindAction("CrosshairReset", throwIfNotFound: true);
    }

    ~@PlayerInputAction()
    {
        UnityEngine.Debug.Assert(!m_IngamePlayer.enabled, "This will cause a leak and performance issues, PlayerInputAction.IngamePlayer.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // IngamePlayer
    private readonly InputActionMap m_IngamePlayer;
    private List<IIngamePlayerActions> m_IngamePlayerActionsCallbackInterfaces = new List<IIngamePlayerActions>();
    private readonly InputAction m_IngamePlayer_Move;
    private readonly InputAction m_IngamePlayer_Avoid;
    private readonly InputAction m_IngamePlayer_Look;
    private readonly InputAction m_IngamePlayer_CrosshairReset;
    public struct IngamePlayerActions
    {
        private @PlayerInputAction m_Wrapper;
        public IngamePlayerActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_IngamePlayer_Move;
        public InputAction @Avoid => m_Wrapper.m_IngamePlayer_Avoid;
        public InputAction @Look => m_Wrapper.m_IngamePlayer_Look;
        public InputAction @CrosshairReset => m_Wrapper.m_IngamePlayer_CrosshairReset;
        public InputActionMap Get() { return m_Wrapper.m_IngamePlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(IngamePlayerActions set) { return set.Get(); }
        public void AddCallbacks(IIngamePlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_IngamePlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_IngamePlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Avoid.started += instance.OnAvoid;
            @Avoid.performed += instance.OnAvoid;
            @Avoid.canceled += instance.OnAvoid;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @CrosshairReset.started += instance.OnCrosshairReset;
            @CrosshairReset.performed += instance.OnCrosshairReset;
            @CrosshairReset.canceled += instance.OnCrosshairReset;
        }

        private void UnregisterCallbacks(IIngamePlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Avoid.started -= instance.OnAvoid;
            @Avoid.performed -= instance.OnAvoid;
            @Avoid.canceled -= instance.OnAvoid;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @CrosshairReset.started -= instance.OnCrosshairReset;
            @CrosshairReset.performed -= instance.OnCrosshairReset;
            @CrosshairReset.canceled -= instance.OnCrosshairReset;
        }

        public void RemoveCallbacks(IIngamePlayerActions instance)
        {
            if (m_Wrapper.m_IngamePlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IIngamePlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_IngamePlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_IngamePlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public IngamePlayerActions @IngamePlayer => new IngamePlayerActions(this);
    public interface IIngamePlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnAvoid(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnCrosshairReset(InputAction.CallbackContext context);
    }
}
